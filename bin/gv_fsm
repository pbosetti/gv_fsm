#!/usr/bin/env ruby

require "gv_fsm"
require 'optparse'

sm = GV_FSM::FSM.new

options = {header: true, source: true}
op = OptionParser.new do |parser|
  parser.banner =<<~EOB 
  Graphviz to Finite State Machine generator
  Version: #{GV_FSM::VERSION}
  See also https://github.com/pbosetti/gv_fsm
  
  Usage: gv_fsm [options] scheme.dot
  EOB

  parser.on("-p", "--project PROJECT_NAME",
            "Set the project name to PROJECT_NAME") do |pn|
    sm.project_name = pn
  end

  parser.on("-d", "--description DESCRIPTION", "Use DESCRITION string in header") do |desc|
    sm.description = desc
  end

  parser.on("-o", "--output_file NAME", "Use NAME for generated .c and .h files") do |f|
    sm.cname = f
  end

  parser.on("-e", "--header-only", "Only generate header file") do
    options[:source] = false
  end

  parser.on("-s", "--source-only", "Only generate source file") do
    options[:header] = false
  end

  parser.on("-x", "--prefix PREFIX", "Prepend PREFIX to names of generated functions and objects") do |p|
    sm.prefix = p
  end

  parser.on("-i", "--ino", "Generate a single .ino file (for Arduino)") do
    sm.ino = true
  end

  parser.on("-l", "--no-log", "Omit log calls in stub functions") do
    sm.syslog = false
  end

  parser.on("-k", "--sigint STATE", "Install SIGINT handler that points to STATE") do |state|
    sm.sigint = state
  end

  parser.on("-h", "--help", "Display this help and exit") do
    puts parser
    exit
  end
  
  parser.on("-v", "--version", "Output version information and exit") do
    puts "#{File.basename($PROGRAM_NAME, File.extname($PROGRAM_NAME))} #{GV_FSM::VERSION}"
    exit
  end
end

op.parse!

unless ARGV[0]
  STDERR.puts "ERROR: I need the path to a Graphviz file!\n\n"
  STDERR.puts op
  exit 1
end
if !File.extname(ARGV[0]) == ".dot" or !File.exist? ARGV[0] then
  STDERR.puts "ERROR: #{ARGV[0]} does not look like a Graphviz file!\n\n"
  STDERR.puts op
  exit 2
end

unless sm.parse(ARGV[0]) then
  puts "Error parsing the file #{ARGV[0]}: #{sm.error}"
  exit 3
end

if sm.ino && sm.sigint then
  STDERR.puts "ERROR: signal handler is not supported on Arduino!\n\n"
  exit 4
end

puts "Parsed #{sm.dotfile}"
top = sm.topology
puts "Graph topology:"
puts "  Pure source nodes: #{top[:sources].join(', ')}"
puts "  Pure sink nodes:   #{top[:sinks].empty? ? "<none>" : top[:sinks].join(', ')}"

if !(top[:sources].count == 1 and top[:sinks].count <= 1) then
  puts "Topology error: there must be exactly one source and zero or one sink"
  exit 4
end

puts "Generating C functions for states: #{sm.states_list.join(", ")}."
puts "                   for transition: #{sm.transition_functions_list.join(", ")}."

if (sm.sigint) then
  puts "Installed signal handler for SIGINT in state #{top[:sources][0]}:\n  stable states have emergency transition to state #{sm.sigint}"
  unless top[:sinks].include? sm.sigint then
    puts "WARNING: the state #{sm.sigint} is not a source, please check topology"
  end
end

if options[:header] then
  name = sm.generate_h 
  puts "Generated header #{name}"
end

if options[:source] then
  name = sm.generate_c
  puts "Generated source #{name}"
end

